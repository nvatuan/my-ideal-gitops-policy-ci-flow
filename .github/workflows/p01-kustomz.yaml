name: Run GitOps Kustomz

on:
  pull_request:
    paths:
      - 'manifests/services/**'
      - 'policies/**'

permissions:
  contents: read
  pull-requests: write

env:
  GO_VERSION: '1.22'
  KUSTOMIZE_VERSION: '5.3.0'
  OPA_VERSION: '0.60.0'
  GITOPS_KUSTOMZ_VERSION: 'latest'  # TODO: pin to specific version like 'v1.0.0' when it is stable
  MANIFESTS_PATH: 'manifests/services'

jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      - name: Get changed YAML files
        id: changed-files
        run: |
          changed_files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E "^${{ env.MANIFESTS_PATH }}/.*\.(yaml|yml)$" || echo "")
          if [ -z "$changed_files" ]; then
            echo "has-files=false" >> $GITHUB_OUTPUT
          else
            echo "has-files=true" >> $GITHUB_OUTPUT
            echo "$changed_files" > changed-files.txt
            echo "Changed files:"
            cat changed-files.txt
          fi

      - name: Detect changed services and environments
        id: set-matrix
        run: |
          # Get list of changed files
          CHANGED_FILES=$(cat changed-files.txt)
          
          # Extract unique service-environment combinations
          # Assumes structure: <manifests_path>/<service>/environments/<env>/
          SERVICES=$(echo "$CHANGED_FILES" | cut -d / -f 3 | sort | uniq | xargs -I@ echo "\"@\"" | tr '\n' ',')
          SERVICES="[${SERVICES::-1}]"
          
          if [ $DEBUG == 'true' ]; then
            echo "[DEBUG] SERVICES: $SERVICES"
          fi
          
          echo "services=$SERVICES" >> $GITHUB_OUTPUT

  kustomz:
    name: Kustomz on ${{ matrix.service }} (stg,prod)
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.services != '[]'
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
      fail-fast: false  # Continue checking all services even if one fails
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Only need base and head commits

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache tools
        id: cache-tools
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/bin/kustomize
            /usr/local/bin/opa
            ~/go/bin/gitops-kustomz
          key: tools-${{ runner.os }}-kustomize-${{ env.KUSTOMIZE_VERSION }}-opa-${{ env.OPA_VERSION }}-gitops-${{ env.GITOPS_KUSTOMZ_VERSION }}

      - name: Install kustomize
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          curl -sL "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv${{ env.KUSTOMIZE_VERSION }}/kustomize_v${{ env.KUSTOMIZE_VERSION }}_linux_amd64.tar.gz" | tar xz
          sudo mv kustomize /usr/local/bin/
          kustomize version

      - name: Install OPA
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          curl -L -o opa "https://github.com/open-policy-agent/opa/releases/download/v${{ env.OPA_VERSION }}/opa_linux_amd64_static"
          chmod +x opa
          sudo mv opa /usr/local/bin/
          opa version

      - name: Install gitops-kustomz
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          go install github.com/gh-nvat/gitops-kustomz@${{ env.GITOPS_KUSTOMZ_VERSION }}
          cp ~/go/bin/gitops-kustomz ~/go/bin/gitops-kustomz.bak || true

      - name: Add tools to PATH
        run: |
          echo "/usr/local/bin" >> $GITHUB_PATH
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Run policy check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gitops-kustomz \
            --run-mode github \
            --gh-repo ${{ github.repository }} \
            --gh-pr-number ${{ github.event.pull_request.number }} \
            --service ${{ matrix.service }} \
            --environments stg,prod \
            --policies-path ./policies \
            --templates-path ./templates
        continue-on-error: true  # Don't fail the job, let the tool determine pass/fail
