name: P01 - SP Policy Enforcement

on:
  pull_request:
    paths:
      - 'manifests/services/**'
      - 'policies/**'

permissions:
  contents: read
  pull-requests: write

env:
  KUSTOMIZE_VERSION: '5.3.0'
  CONFTEST_VERSION: '0.63.0'
  MANIFESTS_PATH: 'manifests/services'

jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-outputs.outputs.services }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      - name: Get changed YAML files
        id: changed-files
        run: |
          changed_files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E "^${{ env.MANIFESTS_PATH }}/.*\.(yaml|yml)$" || echo "")
          if [ -z "$changed_files" ]; then
            echo "has-files=false" >> $GITHUB_OUTPUT
          else
            echo "has-files=true" >> $GITHUB_OUTPUT
            echo "$changed_files" > changed-files.txt

            if [ -z "$DEBUG" ]; then
              echo "[DEBUG] Changed files ---|"
              cat changed-files.txt
              echo "[DEBUG] --- end of changed files ---|"
            fi
          fi

      - name: Detect changed services and environments
        id: set-outputs
        run: |
          # Get list of changed files
          CHANGED_FILES=$(cat changed-files.txt)
          
          # Extract unique service-environment combinations
          # Assumes structure: <manifests_path>/<service>/environments/<env>/
          SERVICES=$(echo "$CHANGED_FILES" | cut -d / -f 3 | sort | uniq | xargs -I@ echo "\"@\"" | tr '\n' ',')
          SERVICES="[${SERVICES::-1}]"

          if [ -z "$DEBUG" ]; then
            echo "[DEBUG] SERVICES: $SERVICES"
          fi
          
          echo "services=$SERVICES" >> $GITHUB_OUTPUT

  kustomz:
    name: Kustomz on ${{ matrix.service }} (stg,prod)
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.services != '[]'
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
      fail-fast: false  # Continue checking all services even if one fails
    outputs:
      blocking-pass: ${{ steps.parse-policy-passing-status.outputs.blocking-pass }}
      warning-pass: ${{ steps.parse-policy-passing-status.outputs.warning-pass }}
    steps:
      - name: Get latest gitops-kustomz version
        id: get-version
        run: |
          # Try to get latest release from GitHub API
          LATEST_VERSION=$(curl -s "https://api.github.com/repos/nvatuan/gitops-kustomz/releases/latest" | jq -r '.tag_name' 2>/dev/null || echo "")
          
          # Fallback to a known working version if API fails
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "null" ]; then
            echo "Failed to fetch latest version, using fallback"
            LATEST_VERSION="v0.1.0"
          fi
          
          echo "Using gitops-kustomz version: $LATEST_VERSION"
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 1

      - name: Cache tools
        id: cache-tools
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/bin/kustomize
            /usr/local/bin/conftest
            /usr/local/bin/gitops-kustomz
          key: tools-${{ runner.os }}-kustomize-${{ env.KUSTOMIZE_VERSION }}-conftest-${{ env.CONFTEST_VERSION }}-gitops-${{ steps.get-version.outputs.version }}

      - name: Install kustomize
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          curl -sL "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv${{ env.KUSTOMIZE_VERSION }}/kustomize_v${{ env.KUSTOMIZE_VERSION }}_linux_amd64.tar.gz" | tar xz
          sudo mv kustomize /usr/local/bin/
          kustomize version

      - name: Install conftest
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          curl -L -o conftest.tar.gz "https://github.com/open-policy-agent/conftest/releases/download/v${{ env.CONFTEST_VERSION }}/conftest_${{ env.CONFTEST_VERSION }}_Linux_x86_64.tar.gz"
          tar -xzf conftest.tar.gz
          chmod +x conftest
          sudo mv conftest /usr/local/bin/
          conftest --version

      - name: Install gitops-kustomz
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          # Download pre-built binary from GitHub releases
          ARCH=$(uname -m)
          OS=$(uname -s | tr '[:upper:]' '[:lower:]')
          
          # Map architecture names
          if [ "$ARCH" = "x86_64" ]; then ARCH="amd64"; fi
          if [ "$ARCH" = "aarch64" ]; then ARCH="arm64"; fi
          
          BINARY_NAME="gitops-kustomz-${OS}-${ARCH}"
          DOWNLOAD_URL="https://github.com/nvatuan/gitops-kustomz/releases/download/${{ steps.get-version.outputs.version }}/${BINARY_NAME}"          

          echo "Downloading ${BINARY_NAME} from ${DOWNLOAD_URL}"
          curl -L "${DOWNLOAD_URL}" -o /usr/local/bin/gitops-kustomz
          chmod +x /usr/local/bin/gitops-kustomz
          /usr/local/bin/gitops-kustomz --version

      - name: Add tools to PATH
        run: |
          echo "/usr/local/bin" >> $GITHUB_PATH
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Run policy check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_RUN_ID: ${{ github.run_id }}
          GITHUB_COMMENT_MAX_DIFF_LENGTH: 90
        run: |
          gitops-kustomz \
            --run-mode github \
            --gh-repo ${{ github.repository }} \
            --gh-pr-number ${{ github.event.pull_request.number }} \
            --manifests-path manifests/services \
            --service ${{ matrix.service }} \
            --environments stg,prod \
            --policies-path kustomz/policies \
            --templates-path kustomz/templates \
            --output-dir output \
            --enable-export-report true
        continue-on-error: false # Binary will only fail if there are misconfigurations. Policy failure doesn't fail the job.

      - name: Prepare artifacts for upload
        id: prepare-artifacts
        if: always()
        run: |
          # Check if report.json exists
          if [ ! -f "output/report.json" ]; then
            echo "‚ùå Report file not found"
            exit 1
          fi
          
          # Process artifacts for environments with contentType "ext_ghartifact"
          echo "Processing artifacts..."
          ARTIFACT_PATHS=""
          ARTIFACT_COUNT=0
          
          # Get all environments and check their contentType
          ENVIRONMENTS=$(jq -r '.manifestChanges | keys[]' output/report.json)
          
          for env in $ENVIRONMENTS; do
            CONTENT_TYPE=$(jq -r ".manifestChanges[\"$env\"].contentType" output/report.json)
            CONTENT_PATH=$(jq -r ".manifestChanges[\"$env\"].contentGHFilePath" output/report.json)
            
            if [ "$CONTENT_TYPE" = "ext_ghartifact" ] && [ "$CONTENT_PATH" != "null" ] && [ -n "$CONTENT_PATH" ]; then
              echo "üì¶ Found artifact for environment: $env"
              echo "   Content path: $CONTENT_PATH"
              
              # Check if the file exists
              if [ -f "$CONTENT_PATH" ]; then
                echo "   ‚úÖ File exists, will upload as artifact"
                ARTIFACT_PATHS="$ARTIFACT_PATHS$CONTENT_PATH"$'\n'
                ARTIFACT_COUNT=$((ARTIFACT_COUNT + 1))
              else
                echo "   ‚ùå File not found: $CONTENT_PATH"
              fi
            fi
          done
          
          echo "Total artifacts to upload: $ARTIFACT_COUNT"
          echo "artifact-count=$ARTIFACT_COUNT" >> $GITHUB_OUTPUT
          
          # Save artifact paths for upload step
          if [ $ARTIFACT_COUNT -gt 0 ]; then
            echo "$ARTIFACT_PATHS" > artifact-paths.txt
            echo "artifact-paths<<EOF" >> $GITHUB_OUTPUT
            echo "$ARTIFACT_PATHS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Upload artifacts
        if: always() && steps.prepare-artifacts.outputs.artifact-count > 0
        uses: actions/upload-artifact@v4
        with:
          name: manifest-${{ matrix.service }}-artifacts
          path: |
            ${{ steps.prepare-artifacts.outputs.artifact-paths }}
          retention-days: 30

      - name: Process policy results
        id: parse-policy-passing-status
        if: always()
        run: |
          # Check if report.json exists
          if [ ! -f "output/report.json" ]; then
            echo "‚ùå Report file not found"
            exit 1
          fi
          
          # Extract blocking check results for all environments
          BLOCKING_RESULTS=$(jq -r '.policyEvaluation.environmentSummary | to_entries[] | .value.passingStatus.passBlockingCheck' output/report.json)
          WARNING_RESULTS=$(jq -r '.policyEvaluation.environmentSummary | to_entries[] | .value.passingStatus.passWarningCheck' output/report.json)
          
          echo "Blocking policy results: $BLOCKING_RESULTS"
          echo "Warning policy results: $WARNING_RESULTS"
          
          # Check if any environment failed blocking policies
          BLOCKING_FAILED=$(echo "$BLOCKING_RESULTS" | grep -c "false" || echo "0")
          WARNING_FAILED=$(echo "$WARNING_RESULTS" | grep -c "false" || echo "0")
          
          if [ "$BLOCKING_FAILED" -gt 0 ]; then
            echo "‚ùå Blocking policies failed in $BLOCKING_FAILED environment(s)"
            echo "blocking-pass=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ All blocking policies passed"
            echo "blocking-pass=true" >> $GITHUB_OUTPUT
          fi
          
          if [ "$WARNING_FAILED" -gt 0 ]; then
            echo "‚ùå Warning policies failed in $WARNING_FAILED environment(s)"
            echo "warning-pass=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ All warning policies passed"
            echo "warning-pass=true" >> $GITHUB_OUTPUT
          fi

  check-blocking-policies:
    name: Check Blocking Policies
    runs-on: ubuntu-latest
    needs: kustomz
    if: always()
    steps:
      - name: Check blocking policies
        run: |
          if [ "${{ needs.kustomz.result }}" != "success" ]; then
            echo "‚ùå Kustomz job failed, blocking will exit 0 but warning will fail to signify something went wrong"
            exit 0
          fi

          # Get the blocking pass status from the kustomz job outputs
          BLOCKING_PASS="${{ needs.kustomz.outputs.blocking-pass }}"
          
          if [ "$BLOCKING_PASS" = "true" ]; then
            echo "‚úÖ All blocking policies passed"
          else
            echo "‚ùå Blocking policies failed"
            echo "This check is REQUIRED before merge"
            exit 1
          fi

  check-warning-policies:
    name: Check Warning Policies
    runs-on: ubuntu-latest
    needs: kustomz
    if: always()
    steps:
      - name: Check warning policies
        run: |
          if [ "${{ needs.kustomz.result }}" != "success" ]; then
            echo "‚ùå Kustomz job failed, blocking will exit 0 but warning will fail to signify something went wrong"
            exit 0
          fi

          # Get the warning pass status from the kustomz job outputs
          WARNING_PASS="${{ needs.kustomz.outputs.warning-pass }}"
          
          if [ "$WARNING_PASS" = "true" ]; then
            echo "‚úÖ All warning policies passed"
          else
            echo "‚ùå Warning policies failed"
            echo "This check is REQUIRED before merge"
            exit 1
          fi
